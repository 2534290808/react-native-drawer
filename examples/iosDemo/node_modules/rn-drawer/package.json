{
  "name": "rn-drawer",
  "version": "1.0.4",
  "description": "React Native Drawer",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:rt2zz/rn-drawer.git"
  },
  "dependencies": {
    "tween-functions": "^1.0.1"
  },
  "peerDependencies": {
    "react-native": "^0.4.0"
  },
  "keywords": [
    "react-native",
    "react-component",
    "ios",
    "drawer",
    "side-menu",
    "menu"
  ],
  "author": {
    "name": "rt2zz",
    "email": "zack@root-two.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rt2zz/rn-drawer/issues"
  },
  "homepage": "https://github.com/rt2zz/rn-drawer",
  "gitHead": "fa5147cfacd7bdea299773cf10b624837cd9ec80",
  "readme": "## React Native Drawer\nConfigurable react native pull out drawer. Supports displace, overlay (material design) static (slack style) transitions modes, as well as custom tweens.  \n\n**beta note**: rn-drawer just switched from layoutAnimation to requestAnimationFrame. I am unsure how this will affect performance, but it will be more robust and support a greater range of animations. Let me know if you run into any complications or performance issues.\n\n<p align=\"center\">\n  <img width=\"220px\" src=\"https://raw.githubusercontent.com/rt2zz/rn-drawer/master/examples/rn-drawer.gif\" />\n</p>\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Props](#props)\n- [Demo](#demo)\n- [Credits](#credits)\n\n### Installation\n```bash\nnpm install rn-drawer\n```\n\n### Usage\n```javascript\nvar Drawer = require('rn-drawer')\n\nvar Application = React.createClass({\n  closeControlPanel: function(){\n    this.refs.controlPanel.closeDrawer()\n  },\n  openControlPanel: function(){\n    this.refs.controlPanel.openDrawer()\n  },\n  render: function() {\n    return (\n      <Drawer\n        ref=\"controlPanel\"\n        content={<ControlPanel />}\n        >\n        <MainView />\n      </Drawer>\n    )\n  }\n})\n```\n\nIf you want to close the drawer programmatically, use the closeDrawer & openDrawer methods. There is also a drawerActions prop provided to the drawer component, but this may be removed in future versions.\n\n### Examples\n```js\n//Simple Navigation Style Displacement, Starting Open\n<Drawer\n  type=\"static\"\n  initializeOpen={true}\n  content={<Menu />}\n  >\n    <Main />\n</Drawer>\n\n//Material Design Style Overlay Drawer\n<Drawer\n  type=\"overlay\"\n  openDrawerOffset={50} //50px gap on the right side of drawer\n  panCloseMask={1} //can close with right to left swipe anywhere on screen\n  panStartCompensation={false}\n  relativeDrag={true}\n  styles={{\n    drawer: {\n      shadowColor: \"#000000\",\n      shadowOpacity: 0.8,\n      shadowRadius: 0,\n      }\n  }}\n  tweenHandler={(ratio) => {\n    return {\n      drawer: { shadowRadius: Math.min(ratio*5*5, 5) },\n      main: { opacity:(2-ratio)/2 },\n    }\n  }}\n  content={<Menu />}\n  >\n    <Main />\n</Drawer>\n\n//Slack Style Static Drawer\n<Drawer\n  type=\"static\"\n  closedDrawerOffset={0}\n  openDrawerOffset={100} //100px gap on the right side of drawer\n  initializeOpen={false}\n  openDrawerThreshold={.3} //pan must travel 30% to trigger open/close action on release\n  panOpenMask={.05} //open pan must originate in far left (5%) of screen\n  panCloseMask={.3} //can close with right to left swipe in right hand third of screen\n  panStartCompensation={false}\n  relativeDrag={true}\n  content={<Menu />}\n  >\n    <Main />\n</Drawer>\n```\n\n### Props\nThis module supports a wide range of drawer styles, and hence has *a lot* of props. It may help to package up presets as separate modules.\n#### Important\n- `content` (React.Component) `null` - Menu component\n- `type` (String: displace:overlay:static) `displace`- Type of drawer.\n- `openDrawerOffset` (Number) `0` - Can either be a integer (pixel value) or decimal (ratio of screen width). Defines the right hand margin when the drawer is open.\n- `closedDrawerOffset` (Number) `0` - Same as openDrawerOffset, except defines left hand margin when drawer is closed.\n- `disabled` (Boolean) `false` - If true the drawer can not be opened and will not respond to pans.\n\n#### Animation / Tween\n- `animation` (String: spring|linear|easeInOut) `linear` - Type of slide animation.\n- `tweenHandler` (Function) `null` - Takes in the pan ratio (decimal 0 to 1) that represents the tween percent. Returns and object of native props to be set on the constituent views { drawer: {/*native props*/}, main: {/*native props*/} }\n- `tweenDuration` (Integer) `250` - The duration of the open/close animation.\n- `tweenEasing` (String) `linear` - A easing type supported by [tween-functions](https://www.npmjs.com/package/tween-functions)\n\n\n#### Additional Configurations\n- `openDrawerThreshold` (Number) `.25` - Ratio of screen width that must be travelled to trigger a drawer open/close\n- `panOpenMask` (Number) `.05` - Ratio of screen width that is valid for the start of a pan open action. Make this number small if you need pans to propagate to children.\n- `panCloseMask` (Number) `.25` - Ratio of screen width that is valid for the start of a pan close action. Make this number small if you need pans to propagate to children.\n- `relativeDrag` (Boolean) `true` - true -> open/close calculation based on pan dx : false -> calculation based on absolute pan position (i.e. touch location)\n- `panStartCompensation` (Boolean) `false` - Should the drawer catch up to the finger drag position?\n- `initializeOpen` (Boolean) `false` - Initialize with drawer open?\n- `acceptDoubleTap` (Boolean) `false` - Toggle drawer when double tap occurs within pan mask?\n\nProps are a work in progress, suggestions welcome.  \n@TODO support right hand drawer and multiple drawers.\n\n### Tween Handler\nYou can achieve pretty much any animation you want using the tween handler with the transformMatrix property. E.G.\n```js\ntweenHandler={(ratio) => {\n  var r0 = -ratio/6\n  var r1 = 1-ratio/6\n  var t = [\n             r1,  r0,  0,  0,\n             -r0, r1,  0,  0,\n             0,   0,   1,  0,\n             0,   0,   0,  1,\n          ]\n  return {\n    main: {\n      style: {\n        transformMatrix: t,\n        opacity: 1 - ratio/2,\n      },\n    }\n  }\n}}\n```\nWill result in a skewed fade out animation.\n\n**warning:** Frame rate, and perceived smoothness will vary based on the complexity and speed of the animation. It will likely require some tweaking and compromise to get the animation just right.\n\n### Demo\n`git clone https://github.com/rt2zz/rn-drawer.git`  \nOpen ``./examples/iosDemo/rndrawereg.xcodeproject` in xcode  \n`command+r`\n\n### Credits\nComponent was adapted from and inspired by  \n[@khanghoang](https://github.com/khanghoang)'s [RNSideMenu](https://github.com/khanghoang/RNSideMenu)  \n*AND*  \n[@kureevalexey](https://twitter.com/kureevalexey)'s [react-native-side-menu](https://github.com/Kureev/react-native-side-menu)\n",
  "readmeFilename": "README.md",
  "_id": "rn-drawer@1.0.4",
  "_shasum": "fa44e95aee0b1fbcc61313d7a7ea8915c1890bab",
  "_from": "rn-drawer@>=1.0.4 <2.0.0"
}
